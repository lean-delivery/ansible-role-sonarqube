---
# tasks file for sonarqube pre install

- name: Become section
  block:

  - name: Tune virtual memory
    sysctl:
      name: vm.max_map_count
      value: '{{ sonar_max_map_count }}'
      state: present

  - name: Create sonar group
    group:
      name: '{{ sonar_group }}'
      state: present

  - name: Create sonar user
    user:
      name: '{{ sonar_user }}'
      shell: /sbin/nologin
      group: '{{ sonar_group }}'
      state: present
      home: '/home/{{ sonar_user }}'
      createhome: true

  - name: Mkdir for SonarQube installation
    file:
      path: '{{ sonar_path }}'
      state: directory
      owner: '{{ sonar_user }}'
      group: '{{ sonar_group }}'

  - name: Install requirement unzip
    package:
      name: unzip
      state: present
    register: install_unzip_result
    until: install_unzip_result is succeeded
    retries: 3
    delay: 5
    notify: Restart Sonarqube

  - name: 'Download SonarQube {{ sonar_major_version }}.{{ sonar_minor_version }} checksum'
    uri:
      url: '{{ sonar_store }}/sonarqube-{{ sonar_major_version }}.{{ sonar_minor_version }}.zip.sha'
      return_content: true
    register: sonarqube_checksum

  - name: 'Download SonarQube {{ sonar_major_version }}.{{ sonar_minor_version }}'
    get_url:
      url: '{{ sonar_store }}/sonarqube-{{ sonar_major_version }}.{{ sonar_minor_version }}.zip'
      dest: '{{ sonar_download_path }}/'
      mode: 0644
      owner: '{{ sonar_user }}'
      group: '{{ sonar_group }}'
      checksum: 'sha1:{{ sonarqube_checksum.content|trim }}'
    register: download_distrib_result
    until: download_distrib_result is succeeded
    retries: 3
    delay: 5

  - name: 'Install SonarQube {{ sonar_major_version }}.{{ sonar_minor_version }}'
    unarchive:
      src: '{{ sonar_download_path }}/sonarqube-{{ sonar_major_version }}.{{ sonar_minor_version }}.zip'
      exclude: "{{ sonar_all_excluded_plugins }} + \
      [ 'sonarqube-{{ sonar_major_version }}.{{ sonar_minor_version }}/conf/sonar.properties', \
      'sonarqube-{{ sonar_major_version }}.{{ sonar_minor_version }}/temp/README.txt']"
      dest: '{{ sonar_path }}'
      owner: '{{ sonar_user }}'
      group: '{{ sonar_group }}'
      remote_src: true
      creates: '{{ sonar_installation }}/conf/wrapper.conf'
    notify: Restart Sonarqube

  - name: Render sonar.properties
    template:
      src: sonar.properties.j2
      dest: '{{ sonar_installation }}/conf/sonar.properties'
      mode: 0400
      owner: '{{ sonar_user }}'
    notify: Restart Sonarqube

  - name: Render sonarqube.service
    template:
      src: sonarqube.service.j2
      dest: /etc/systemd/system/sonarqube.service
      mode: 0444
      owner: '{{ sonar_user }}'
    notify: Restart Sonarqube

  - name: Render nginx config
    template:
      src: nginx.sonar.conf.j2
      dest: '{{ nginx_config_path }}'
      mode: 0444
      owner: '{{ sonar_user }}'
    when:
      - sonar_proxy_type == 'nginx'
    notify: Restart Sonarqube

  - name: Download plugins
    get_url:
      url: '{{ item }}'
      dest: '{{ sonar_installation }}/extensions/plugins/'
      mode: 0644
      owner: '{{ sonar_user }}'
      group: '{{ sonar_group }}'
    register: download_plugins_result
    until: download_plugins_result is succeeded
    retries: 3
    delay: 5
    notify: Restart Sonarqube
    loop: '{{ sonar_all_plugins }}'

  become: true
